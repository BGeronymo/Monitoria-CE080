const <- 1.5
minim <- min(f(r)) - const
minim <- min(f(r)) - const
maxim <- max(f(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 4)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1e)')
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f(r)) - const
maxim <- max(f(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]) + 1, round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1e)')
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f(r)) - const
maxim <- max(f(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]) + 1, round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 4)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Adiciona indicadores ao gráfico:
text(x = c(v[2], 0.125, r), y = c(-1, maxi
, maxim + 1),
labels = c("x", "y", "1/3"), font = 2)
##  Adiciona componentes do gráfico:
legend(r - 0.75, 15, col = 1, 'f(x)', lwd = 2, text.font = 2)
##  Adiciona componentes do gráfico:
legend(r - 0.75, 4, col = 1, 'f(x)', lwd = 2, text.font = 2)
##  Adiciona componentes do gráfico:
legend(r + 1, 4, col = 1, 'f(x)', lwd = 2, text.font = 2)
##  Adiciona componentes do gráfico:
legend(r + 0.5, 4, col = 1, 'f(x)', lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1/3"), font = 2)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1e)')
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f(r)) - const
maxim <- max(f(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]) + 1, round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 4)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Adiciona componentes do gráfico:
legend(r + 0.5, 4, col = 1, 'f(x)', lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1/3"), font = 2)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1e)')
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f(r)) - const
maxim <- max(f(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]) + 1, round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Adiciona componentes do gráfico:
legend(r + 0.5, 4, col = 1, 'f(x)', lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1/3"), font = 2)
##  Para resolver a inequação pelo R consideraremos as seguintes expressões:
## 'f1(x) = 2x + 1' e 'f2(x) = 3x'.
f1 <- function(x){
2*x + 1
}
f2 <- function(x){
3*x
}
##  A desigualdade é 'f1(x) >= f2(x)' logo 'f1(x) - f2(x) >= 0'. Portanto
## queremos os valores de x para os quais 'f1(x) - f2(x)' seja maior ou igual a
## zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(function(x){f1(x) - f2(x)}, c(-10, 10))$root
r
##  O resultado revela somente a raiz da função. No entanto queremos saber onde
## se localizam os valores positivos e negativos da função.
##  Chamaremos nessa etapa a expressão 'f1(x) - f2(x)' de 'g(x)'.
g <- function(x){
f1(x) - f2(x)
}
##  Sabemos que a raiz da função 'g(x)' é 1, logo basta verificarmos os valores
## ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, g(x))
##  Vetor para determinar a amplitude do eixo das abscissas:
v <- c(r - 2, r + 2)
##  Determina  a amplitude do eixo das ordenadas:
mini <- min(f1(v), f2(v), g(v))
maxi <- max(f1(v), f2(v), g(v))
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1d)')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 4)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Legenda:
legend(r - 0.75, 15, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1d)')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Legenda:
legend(-0.75, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Legenda:
legend(-0.85, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Legenda:
legend(-0.9, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1"), font = 2)
##  Curvas:
curve(f1, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1d)')
curve(f2, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(g, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
maxim <- max(f1(r), f2(r), g(r)) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = r, x1 = r,
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Legenda:
legend(-0.9, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, r), y = c(-1, maxi, maxim + 1),
labels = c("x", "y", "1"), font = 2)
##  Legenda:
legend(-1, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
##  Para estudar o sinal da expressão pelo R começaremos construindo a função:
f <- function(x){
3*x - 1
}
##  Começaremos achando a raiz da expressão 'f(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(f, c(-10, 10))$root
r
##  Logo para x = 1/3 temos f(x) = 0.
##  Queremos saber também onde se localizam os valores positivos e negativos da
## função. Para isso basta verificarmos os valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, f(x))
##  Para estudar o sinal da expressão pelo R começaremos construindo a função:
f <- function(x){
3*x - 1
}
##  Para estudar o sinal da expressão pelo R começaremos construindo a função:
f <- function(x){
3 - x
}
##  Começaremos achando a raiz da expressão f(x) ou seja, os valores de x para
## os quais f(x) = 0.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(f, c(-10, 10))$root
r
##  Logo para x = 3 temos f(x) = 0.
##  Queremos saber também onde se localizam os valores positivos e negativos da
## função. Para isso basta verificarmos os valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, f(x))
##  Começaremos achando a raiz da expressão f(x) ou seja, os valores de x para
## os quais f(x) = 0.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(f, c(-10, 10))$root
r
##  Para estudar o sinal da expressão pelo R começaremos construindo a função:
f <- function(x){
2 - 3*x
}
##  Começaremos achando a raiz da expressão f(x) ou seja, os valores de x para
## os quais f(x) = 0.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(f, c(-10, 10))$root
r
2/3
##  Logo para x = 2/3 temos f(x) = 0.
##  Queremos saber também onde se localizam os valores positivos e negativos da
## função. Para isso basta verificarmos os valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, f(x))
##  Para estudar o sinal da expressão pelo R começaremos construindo a função:
f <- function(x){
5*x + 1
}
##  Começaremos achando a raiz da expressão f(x) ou seja, os valores de x para
## os quais f(x) = 0.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(f, c(-10, 10))$root
r
1/5
##  Logo para x = -1/5 temos f(x) = 0.
##  Queremos saber também onde se localizam os valores positivos e negativos da
## função. Para isso basta verificarmos os valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.1)
data.frame(x, f(x))
##  Logo para x = -1/5 temos f(x) = 0.
##  Queremos saber também onde se localizam os valores positivos e negativos da
## função. Para isso basta verificarmos os valores ao redor da raiz.
x <- seq(from = r - 0.5, to = r + 0.5, by = 0.25)
data.frame(x, f(x))
##  Para resolver a inequação pelo R consideraremos as seguintes expressões:
## 'f1(x) = 2x + 1' e 'f2(x) = 3x'.
f <- function(x){
x - 1
}
g <- function(x){
x - 2
}
##  Para resolver a inequação pelo R consideraremos as seguintes expressões:
## 'f(x) = x - 1' e 'g(x) = x - 2'.
f <- function(x){
x - 1
}
g <- function(x){
x - 2
}
##  A desigualdade é 'f1(x) >= f2(x)' logo 'f1(x) - f2(x) >= 0'. Portanto
## queremos os valores de x para os quais 'f1(x) - f2(x)' seja maior ou igual a
## zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
r <- uniroot(function(x){f(x)/g(x)}, c(-10, 10))$root
##  A desigualdade é 'f1(x) >= f2(x)' logo 'f1(x) - f2(x) >= 0'. Portanto
## queremos os valores de x para os quais 'f1(x) - f2(x)' seja maior ou igual a
## zero.
##  Começaremos achando a raiz da expressão 'f1(x) - f2(x)'.
##  A função abaixo utiliza iterações para achar a raiz em um intervalo
## pré-determinado, utiliza-se aqui o intervalo (-10, 10) mas é possível inserir
## grandes intervalos a um certo custo de tempo computacional (neste caso
## razoável).
rf <- uniroot(f, c(-10, 10))$root
rf
rg
rg <- uniroot(g, c(-10, 10))$root
rg
##  Sabemos que as raízes das funções f(x) e g(x) são, respectivamente, 1 e 2.
## Agora verificaremos os valores ao redor das raízes.
x <- seq(from = min(rf, rg) - 0.5, to = max(rf, rg) + 0.5, by = 0.1)
data.frame(x, g(x))
data.frame(x, f(x), g(x)), f(x)/g(x))
data.frame(x, f(x), g(x), f(x)/g(x))
##  Sabemos que as raízes das funções f(x) e g(x) são, respectivamente, 1 e 2.
## Agora verificaremos os valores ao redor das raízes.
x <- seq(from = min(rf, rg) - 0.5, to = max(rf, rg) + 0.5, by = 0.5)
data.frame(x, f(x), g(x), f(x)/g(x))
##  Vetor para determinar a amplitude do eixo das abscissas:
v <- c(min(rf, rg) - 2, max(rf, rg) + 2)
##  Define função h(x):
h <- function(x){
f(x)/g(x)
}
##  Determina  a amplitude do eixo das ordenadas:
mini <- min(f(v), g(v), h(v))
maxi <- max(f(v), g(v), h(v))
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1f)')
curve(g, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(h, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f1(r), f2(r), g(r)) - const
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 1.5
minim <- min(f(c(rf, rg)), g(r), h(c(rf, rg))) - const
maxim <- max(f1(c(rf, rg)), f2(c(rf, rg)), g(c(rf, rg))) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = minim, y1 = maxim, lwd = 1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 0.5
minim <- min(f(c(rf, rg)), g(r), h(c(rf, rg))) - const
maxim <- max(f1(c(rf, rg)), f2(c(rf, rg)), g(c(rf, rg))) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = minim, y1 = maxim, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1f)')
curve(g, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(h, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 0.5
minim <- min(f(c(rf, rg)), g(r), h(c(rf, rg))) - const
maxim <- max(f1(c(rf, rg)), f2(c(rf, rg)), g(c(rf, rg))) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = minim, y1 = maxim, lwd = 1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 0.5
minim <- min(f(c(rf, rg)), g(r), h(c(rf, rg))) - const
maxim <- max(f(c(rf, rg)), g(c(rf, rg)), h(c(rf, rg))) + const
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1f)')
curve(g, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(h, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Comprimento da reta vertical que passa pelo ponto de intersecção:
const <- 0.5
minim <- min(f(c(rf, rg)), g(r), h(c(rf, rg))) - const
maxim <- max(f(c(rf, rg)), g(c(rf, rg)), h(c(rf, rg))) + const
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = minim, y1 = maxim, lwd = 1)
minim
maxim
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = -1, y1 = 1, lwd = 1)
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = -2, y1 = 2, lwd = 1)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 2)),
padj = 1, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
text(x = c(v[2], 0.125, rf, rg), y = c(-1, maxi, 2.1, 2.1),
labels = c("x", "y", "1", "2"), font = 2)
##  Curvas:
curve(f, from = v[1], to = v[2], xlim = v, ylim = c(mini, maxi), lwd = 2,
bty = 'n', xaxt = 'n', yaxt = 'n', ylab = '', xlab = '',
main = 'Componentes da Inequação (Seção 1.2.1 Ex.1f)')
curve(g, from = v[1], to = v[2], add = TRUE, col = 2, lwd = 2)
curve(h, from = v[1], to = v[2], add = TRUE, col = 3, lwd = 2)
##  Eixos:
arrows(x0 = v[1], x1 = v[2],
y0 = 0, y1 = 0, lwd = 2, length = 0.1)
arrows(x0 = 0, x1 = 0,
y0 = mini, y1 = maxi, lwd = 2, length = 0.1)
##  Reta vertical que passa pelo ponto de intersecção:
segments(x0 = c(rf, rg), x1 = c(rf, rg),
y0 = -2, y1 = 2, lwd = 1)
##  Enumeração dos eixos:
axis(side = 1, c(seq(round(v[1]), round(v[2]) - 0.5, 1)),
hadj = -0.25, padj = -1.5, pos = 0, cex.axis = 0.7)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
##  Legenda:
legend(0.1, 8, col = c(1, 2, 3), c('f1(x)', 'f2(x)', 'g(x)'),
lwd = 2, text.font = 2)
text(x = c(v[2], 0.125, rf, rg), y = c(-1, maxi, 2.25, 2.25),
labels = c("x", "y", "1", "2"), font = 2)
axis(side = 2, c(seq(round(mini) + 1, round(maxi) - 1, 3)),
padj = 1, pos = 0, cex.axis = 0.7)
round(maxi)
##  Legenda:
legend(-1, 3, col = c(1, 2, 3), c('f(x)', 'g(x)', 'h(x)'),
lwd = 2, text.font = 2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
